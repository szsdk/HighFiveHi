#!/usr/bin/env python3
import time
import click
import rich
import re
from pathlib import Path
import IPython

__doc__ = """This command reads hdf5 files then puts them in a list `df`."""


def read_file(file: str, mode: str = "r"):
    """
    Read a file

    Parameters
    ----------
    file : str
        filename
    mode : str
        reading mode for HDF5 files
    """
    suffix = ("".join(Path(file).suffixes)).lower()
    if suffix in [".npy", ".npz"]:
        import numpy as np

        return np.load(file)
    if suffix in [".png", ".jpg"]:
        import matplotlib.pyplot as plt

        return plt.imread(file)
    if suffix in [".pkl", ".pickle"]:
        import pickle

        with open(file, "rb") as fp:
            return pickle.load(fp)
    if suffix == ".json":
        import json

        with open(file) as fp:
            return json.load(fp)
    if suffix == ".ini":
        from configparser import ConfigParser

        config = ConfigParser()
        config.read(file)
        return config
    if suffix in [".mrc", ".mrc.gz", ".mrc.bz2"]:
        import mrcfile

        return mrcfile.open(file)
    import h5py

    try:
        return h5py.File(file, mode)
    except:
        raise ValueError(f"Cannot parse {file}")


def _process_files(files, mode):
    data_files = []
    named_files = {}
    scripts = []
    for i in files:
        if i[0] == "@":
            named_files[i[1:]] = data_files.pop()
        elif i[-3:] == ".py":
            scripts.append(Path(i).absolute())
        else:
            data_files.append(read_file(i, mode))
    return data_files, named_files, scripts


def _load_scripts(scripts):
    ns = dict()
    for s in scripts:
        with s.open() as fp:
            exec(fp.read(), ns)
    return ns


def _filter_first(n, g, match, func):
    name = n.split("/")[-1]
    if match.search(name):
        func(n, g)


def _print_h5(n, g):
    rich.print(g)
    if len(g.attrs) > 0:
        rich.print(dict(g.attrs))
        # for k, v in g.attrs.items():
            # print(k, v)


def visit(fp, match="", func=None):
    if func is None:
        func = _print_h5
    if match == "":
        fp.visititems(func)
    else:
        match_re = re.compile(match)
        fp.visititems(lambda n, g: _filter_first(n, g, match_re, func))


@click.command(
    help="""
read data from `t.h5` into variable a
hfh t.h5 @a
"""
)
@click.argument("files", nargs=-1)
@click.option(
    "--mode", "-m", help="The reading mode for HDF5 files [a|r|w]", default="r"
)
def cli(files, mode):
    t0 = time.time()
    df, named_files, scripts = _process_files(files, mode)
    ns = {
        "read_file": read_file,
        "visit": visit
    }
    ns.update(named_files)
    ns.update(_load_scripts(scripts))
    if len(df) == 0:
        pass
    elif len(df) == 1:
        ns["df"] = df[0]
    elif len(df) > 1:
        ns["df"] = df

    rich.print(f"reading time: {time.time() - t0:.4f} s")
    rich.print("Try: print({})\n".format(", ".join(ns.keys())))
    IPython.start_ipython(["--pylab", "--no-banner"], user_ns=ns)

    for i in df:
        if hasattr(i, "close") and callable(getattr(i, "close")):
            i.close()


if __name__ == "__main__":
    cli()
