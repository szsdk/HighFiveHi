#!/usr/bin/env python3
import time
import click
from pathlib import Path
import IPython

__doc__ = """This command reads hdf5 files then puts them in a list `f`."""


def read_file(file, mode='r'):
    suffix = Path(file).suffix.lower()
    if suffix in [".npy", ".npz"]:
        import numpy as np
        return np.load(file)
    if suffix in [".png", ".jpg"]:
        import matplotlib.pyplot as plt
        return plt.imread(file)
    if suffix in [".pkl", ".pickle"]:
        import pickle
        with open(file, "rb") as fp:
            return pickle.load(fp)
    if suffix == ".json":
        import json
        with open(file) as fp:
            return json.load(f)
    if suffix == ".ini":
        from configparser import ConfigParser
        config = ConfigParser()
        config.read(file)
        return config
    if suffix in [".mrc", ".mrc.gz", ".mrc.bz2"]:
        import mrcfile
        return mrcfile.open(file)
    import h5py
    try:
        return h5py.File(file, mode)
    except:
        raise ValueError(f"Cannot parse {file}")


def process_files(files, mode):
    data_files = []
    named_files = {}
    scripts = []
    for i in files:
        if i[0] == "@":
            named_files[i[1:]] = data_files.pop()
            continue
        if i[-3:] == ".py":
            scripts.append(Path(i).absolute())
        else:
            data_files.append(read_file(i, mode))
    return data_files, named_files, scripts


def load_scripts(scripts):
    ns = dict()
    for s in scripts:
        with s.open() as fp:
            exec(fp.read(), ns)
    return ns


@click.command(help=__doc__)
@click.argument("files", nargs=-1)
@click.option("--mode", "-m", help="The append mode", default="r")
def cli(files, mode):
    df, named_files, scripts = process_files(files, mode)
    ns = {'read_file': read_file}
    ns.update(named_files)
    ns.update(load_scripts(scripts))
    if len(df) == 0:
        pass
    elif len(df) == 1:
        ns["df"] = df[0]
    elif len(df) > 1:
        ns["df"] = df

    print(time.time() - t0, "s")
    print("Try: print({})\n".format(", ".join(ns.keys())))
    IPython.start_ipython(["--pylab", "--no-banner"], user_ns=ns)

    for i in df:
        if hasattr(i, "close") and callable(getattr(i, 'close')):
            i.close()


if __name__ == "__main__":
    t0 = time.time()
    cli()
