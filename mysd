#!/usr/bin/env python3

import fileinput
import re
import click
from click_help_colors import HelpColorsCommand


class MysdCmd(HelpColorsCommand):
    def parse_args(self, ctx, args):
        if len(args) >= 2:
            a1, args = args[:2], args[2:]
            if len(args) > 0 and args[0][0] != "-":
                a1.append(args.pop(0))
            for flag, val in zip(["--pattern", "--repl", "--input-txt"], a1):
                args = [flag, val] + args
        return super(MysdCmd, self).parse_args(ctx, args)

    def format_usage(self, ctx, formatter):
        click.echo("mysd <pattern> <replcement> [input file] [OPTIONS]")


@click.command(
    cls=MysdCmd,
    context_settings=dict(help_option_names=['-h', '--help']),
    help_headers_color='yellow',
    help_options_color='green'
)
@click.option("--pattern", hidden=True)
@click.option("--repl", hidden=True)
@click.option("--input-txt", default="", hidden=True)
@click.option("--output", default="", help='the output file')
@click.option("--flags", "-f", default="", help="i - case-insensitive")
def main(pattern, repl, input_txt, output, flags):
    if "i" in flags:
        pattern = re.compile(pattern, re.IGNORECASE)
    else:
        pattern = re.compile(pattern)
    result = []
    for line in fileinput.input(input_txt if len(input_txt) > 0 else "-"):
        result.append(pattern.sub(repl, line))
    result = "".join(result)
    if len(output) == 0:
        print(result, end='')
    else:
        with open(output, "w") as fp:
            print(result, file=fp, end='')


if __name__ == "__main__":
    main()
